// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/rode/collector-build/proto/v1alpha1"
	"google.golang.org/grpc"
)

type FakeBuildCollectorClient struct {
	CreateBuildStub        func(context.Context, *v1alpha1.CreateBuildRequest, ...grpc.CallOption) (*v1alpha1.CreateBuildResponse, error)
	createBuildMutex       sync.RWMutex
	createBuildArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.CreateBuildRequest
		arg3 []grpc.CallOption
	}
	createBuildReturns struct {
		result1 *v1alpha1.CreateBuildResponse
		result2 error
	}
	createBuildReturnsOnCall map[int]struct {
		result1 *v1alpha1.CreateBuildResponse
		result2 error
	}
	UpdateBuildArtifactsStub        func(context.Context, *v1alpha1.UpdateBuildArtifactsRequest, ...grpc.CallOption) (*v1alpha1.UpdateBuildArtifactsResponse, error)
	updateBuildArtifactsMutex       sync.RWMutex
	updateBuildArtifactsArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.UpdateBuildArtifactsRequest
		arg3 []grpc.CallOption
	}
	updateBuildArtifactsReturns struct {
		result1 *v1alpha1.UpdateBuildArtifactsResponse
		result2 error
	}
	updateBuildArtifactsReturnsOnCall map[int]struct {
		result1 *v1alpha1.UpdateBuildArtifactsResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBuildCollectorClient) CreateBuild(arg1 context.Context, arg2 *v1alpha1.CreateBuildRequest, arg3 ...grpc.CallOption) (*v1alpha1.CreateBuildResponse, error) {
	fake.createBuildMutex.Lock()
	ret, specificReturn := fake.createBuildReturnsOnCall[len(fake.createBuildArgsForCall)]
	fake.createBuildArgsForCall = append(fake.createBuildArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.CreateBuildRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreateBuildStub
	fakeReturns := fake.createBuildReturns
	fake.recordInvocation("CreateBuild", []interface{}{arg1, arg2, arg3})
	fake.createBuildMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBuildCollectorClient) CreateBuildCallCount() int {
	fake.createBuildMutex.RLock()
	defer fake.createBuildMutex.RUnlock()
	return len(fake.createBuildArgsForCall)
}

func (fake *FakeBuildCollectorClient) CreateBuildCalls(stub func(context.Context, *v1alpha1.CreateBuildRequest, ...grpc.CallOption) (*v1alpha1.CreateBuildResponse, error)) {
	fake.createBuildMutex.Lock()
	defer fake.createBuildMutex.Unlock()
	fake.CreateBuildStub = stub
}

func (fake *FakeBuildCollectorClient) CreateBuildArgsForCall(i int) (context.Context, *v1alpha1.CreateBuildRequest, []grpc.CallOption) {
	fake.createBuildMutex.RLock()
	defer fake.createBuildMutex.RUnlock()
	argsForCall := fake.createBuildArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBuildCollectorClient) CreateBuildReturns(result1 *v1alpha1.CreateBuildResponse, result2 error) {
	fake.createBuildMutex.Lock()
	defer fake.createBuildMutex.Unlock()
	fake.CreateBuildStub = nil
	fake.createBuildReturns = struct {
		result1 *v1alpha1.CreateBuildResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildCollectorClient) CreateBuildReturnsOnCall(i int, result1 *v1alpha1.CreateBuildResponse, result2 error) {
	fake.createBuildMutex.Lock()
	defer fake.createBuildMutex.Unlock()
	fake.CreateBuildStub = nil
	if fake.createBuildReturnsOnCall == nil {
		fake.createBuildReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.CreateBuildResponse
			result2 error
		})
	}
	fake.createBuildReturnsOnCall[i] = struct {
		result1 *v1alpha1.CreateBuildResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildCollectorClient) UpdateBuildArtifacts(arg1 context.Context, arg2 *v1alpha1.UpdateBuildArtifactsRequest, arg3 ...grpc.CallOption) (*v1alpha1.UpdateBuildArtifactsResponse, error) {
	fake.updateBuildArtifactsMutex.Lock()
	ret, specificReturn := fake.updateBuildArtifactsReturnsOnCall[len(fake.updateBuildArtifactsArgsForCall)]
	fake.updateBuildArtifactsArgsForCall = append(fake.updateBuildArtifactsArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.UpdateBuildArtifactsRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdateBuildArtifactsStub
	fakeReturns := fake.updateBuildArtifactsReturns
	fake.recordInvocation("UpdateBuildArtifacts", []interface{}{arg1, arg2, arg3})
	fake.updateBuildArtifactsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBuildCollectorClient) UpdateBuildArtifactsCallCount() int {
	fake.updateBuildArtifactsMutex.RLock()
	defer fake.updateBuildArtifactsMutex.RUnlock()
	return len(fake.updateBuildArtifactsArgsForCall)
}

func (fake *FakeBuildCollectorClient) UpdateBuildArtifactsCalls(stub func(context.Context, *v1alpha1.UpdateBuildArtifactsRequest, ...grpc.CallOption) (*v1alpha1.UpdateBuildArtifactsResponse, error)) {
	fake.updateBuildArtifactsMutex.Lock()
	defer fake.updateBuildArtifactsMutex.Unlock()
	fake.UpdateBuildArtifactsStub = stub
}

func (fake *FakeBuildCollectorClient) UpdateBuildArtifactsArgsForCall(i int) (context.Context, *v1alpha1.UpdateBuildArtifactsRequest, []grpc.CallOption) {
	fake.updateBuildArtifactsMutex.RLock()
	defer fake.updateBuildArtifactsMutex.RUnlock()
	argsForCall := fake.updateBuildArtifactsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBuildCollectorClient) UpdateBuildArtifactsReturns(result1 *v1alpha1.UpdateBuildArtifactsResponse, result2 error) {
	fake.updateBuildArtifactsMutex.Lock()
	defer fake.updateBuildArtifactsMutex.Unlock()
	fake.UpdateBuildArtifactsStub = nil
	fake.updateBuildArtifactsReturns = struct {
		result1 *v1alpha1.UpdateBuildArtifactsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildCollectorClient) UpdateBuildArtifactsReturnsOnCall(i int, result1 *v1alpha1.UpdateBuildArtifactsResponse, result2 error) {
	fake.updateBuildArtifactsMutex.Lock()
	defer fake.updateBuildArtifactsMutex.Unlock()
	fake.UpdateBuildArtifactsStub = nil
	if fake.updateBuildArtifactsReturnsOnCall == nil {
		fake.updateBuildArtifactsReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.UpdateBuildArtifactsResponse
			result2 error
		})
	}
	fake.updateBuildArtifactsReturnsOnCall[i] = struct {
		result1 *v1alpha1.UpdateBuildArtifactsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildCollectorClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createBuildMutex.RLock()
	defer fake.createBuildMutex.RUnlock()
	fake.updateBuildArtifactsMutex.RLock()
	defer fake.updateBuildArtifactsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBuildCollectorClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1alpha1.BuildCollectorClient = new(FakeBuildCollectorClient)
