// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/google/go-github/v35/github"
)

type FakeActionsService struct {
	ListWorkflowJobsStub        func(context.Context, string, string, int64, *github.ListWorkflowJobsOptions) (*github.Jobs, *github.Response, error)
	listWorkflowJobsMutex       sync.RWMutex
	listWorkflowJobsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
		arg5 *github.ListWorkflowJobsOptions
	}
	listWorkflowJobsReturns struct {
		result1 *github.Jobs
		result2 *github.Response
		result3 error
	}
	listWorkflowJobsReturnsOnCall map[int]struct {
		result1 *github.Jobs
		result2 *github.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeActionsService) ListWorkflowJobs(arg1 context.Context, arg2 string, arg3 string, arg4 int64, arg5 *github.ListWorkflowJobsOptions) (*github.Jobs, *github.Response, error) {
	fake.listWorkflowJobsMutex.Lock()
	ret, specificReturn := fake.listWorkflowJobsReturnsOnCall[len(fake.listWorkflowJobsArgsForCall)]
	fake.listWorkflowJobsArgsForCall = append(fake.listWorkflowJobsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
		arg5 *github.ListWorkflowJobsOptions
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ListWorkflowJobsStub
	fakeReturns := fake.listWorkflowJobsReturns
	fake.recordInvocation("ListWorkflowJobs", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.listWorkflowJobsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeActionsService) ListWorkflowJobsCallCount() int {
	fake.listWorkflowJobsMutex.RLock()
	defer fake.listWorkflowJobsMutex.RUnlock()
	return len(fake.listWorkflowJobsArgsForCall)
}

func (fake *FakeActionsService) ListWorkflowJobsCalls(stub func(context.Context, string, string, int64, *github.ListWorkflowJobsOptions) (*github.Jobs, *github.Response, error)) {
	fake.listWorkflowJobsMutex.Lock()
	defer fake.listWorkflowJobsMutex.Unlock()
	fake.ListWorkflowJobsStub = stub
}

func (fake *FakeActionsService) ListWorkflowJobsArgsForCall(i int) (context.Context, string, string, int64, *github.ListWorkflowJobsOptions) {
	fake.listWorkflowJobsMutex.RLock()
	defer fake.listWorkflowJobsMutex.RUnlock()
	argsForCall := fake.listWorkflowJobsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeActionsService) ListWorkflowJobsReturns(result1 *github.Jobs, result2 *github.Response, result3 error) {
	fake.listWorkflowJobsMutex.Lock()
	defer fake.listWorkflowJobsMutex.Unlock()
	fake.ListWorkflowJobsStub = nil
	fake.listWorkflowJobsReturns = struct {
		result1 *github.Jobs
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeActionsService) ListWorkflowJobsReturnsOnCall(i int, result1 *github.Jobs, result2 *github.Response, result3 error) {
	fake.listWorkflowJobsMutex.Lock()
	defer fake.listWorkflowJobsMutex.Unlock()
	fake.ListWorkflowJobsStub = nil
	if fake.listWorkflowJobsReturnsOnCall == nil {
		fake.listWorkflowJobsReturnsOnCall = make(map[int]struct {
			result1 *github.Jobs
			result2 *github.Response
			result3 error
		})
	}
	fake.listWorkflowJobsReturnsOnCall[i] = struct {
		result1 *github.Jobs
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeActionsService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listWorkflowJobsMutex.RLock()
	defer fake.listWorkflowJobsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeActionsService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
